//[[BEGIN_GENERATED_CODE]]
$teg_header($getvar(TEG_module_name))#ifdef WIN32
#include <windows.h>
#endif

//[[write your include file here below]]

//[[write your include file here above]]
//[[do not write under this line]] 

#include "$getvar(TEG_module_name).h"

//[[extension entry point]]
#ifdef WIN32
#define DLL_EXPORT  __declspec(dllexport)

BOOL APIENTRY DllMain(HANDLE hModule,
                      DWORD  ul_reason_for_call,
                      LPVOID lpReserved)
{
  return TRUE;
}

#else
#define DLL_EXPORT 
#endif

$teg_load($getvar(TEG_module_name).lst, TEG_command_list)$cycle(TEG_command_list)$recval(TEG_command_list, f1) cmd$tqrstat(TEG_command_list, ACTUALROW)("$recval(TEG_command_list, f1)");
$endcycle(TEG_command_list)TNTAPI*    g_pTNTAPI; //[[Tannit© hook object pointer]]

$teg_load($getvar(TEG_module_name).lst, TEG_command_list)void DLL_EXPORT TannitHandshake(AbstractCommand** ppCommands, TNTAPI* pTNTAPI)
{
  $cycle(TEG_command_list)  ppCommands[$makeop($tqrstat(TEG_command_list, ACTUALROW)-1, %.0f)] = (AbstractCommand*)&cmd$tqrstat(TEG_command_list, ACTUALROW);
  $endcycle(TEG_command_list)  g_pTNTAPI = pTNTAPI;
}

//[[add command Execute method implementation here below]]

$teg_load($getvar(TEG_module_name).lst, TEG_command_list)$cycle(TEG_command_list)//
//[[command $recval(TEG_command_list, f1)]]
//
char* $recval(TEG_command_list, f1)::Execute(char* inputstr)
{
  m_Output.SetEmpty();
  
  // insert your valuable code here
  
  return m_Output.GetBuffer();
}

$endcycle(TEG_command_list)//[[add command Execute method implementation here above]]
//[[END_GENERATED_CODE]]
